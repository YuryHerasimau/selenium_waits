{"name": "Test Authentication", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 10s, while waiting for:\nbrowser.element(('css selector', '#login')).type: John\n\nReason: ElementNotInteractableException: element not interactable\n  (Session info: chrome=121.0.6167.140)\nScreenshot: file://C:\\Users\\Юрий\\.selene\\screenshots\\1719012484799\\1719012484799.png\nPageSource: file://C:\\Users\\Юрий\\.selene\\screenshots\\1719012484799\\1719012484799.html", "trace": "fn = <selene.core.wait.Command object at 0x000002427CE053F0>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n>               return fn(self.entity)\n\nenv\\lib\\site-packages\\selene\\core\\wait.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nenv\\lib\\site-packages\\selene\\core\\wait.py:61: in __call__\n    return self._fn(entity)\nenv\\lib\\site-packages\\selene\\core\\entity.py:451: in fn\n    webelement.send_keys(str(text))\nenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:231: in send_keys\n    self._execute(\nenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002427CCFFE20>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...07FF6003DF2E4]\\\\n\\\\tBaseThreadInitThunk [0x00007FFF68427344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFF6961CC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=121.0.6167.140)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6007C7012+3522402]\nE       \t(No symbol) [0x00007FF6003E8352]\nE       \t(No symbol) [0x00007FF60029596D]\nE       \t(No symbol) [0x00007FF6002D6E47]\nE       \t(No symbol) [0x00007FF6002D59A3]\nE       \t(No symbol) [0x00007FF6002FF05A]\nE       \t(No symbol) [0x00007FF6002D120A]\nE       \t(No symbol) [0x00007FF6002FF270]\nE       \t(No symbol) [0x00007FF60031BDA3]\nE       \t(No symbol) [0x00007FF6002FEE03]\nE       \t(No symbol) [0x00007FF6002CF4D4]\nE       \t(No symbol) [0x00007FF6002D05F1]\nE       \tGetHandleVerifier [0x00007FF6007F9B9D+3730157]\nE       \tGetHandleVerifier [0x00007FF60084F02D+4079485]\nE       \tGetHandleVerifier [0x00007FF6008475D3+4048163]\nE       \tGetHandleVerifier [0x00007FF60051A649+718233]\nE       \t(No symbol) [0x00007FF6003F4A3F]\nE       \t(No symbol) [0x00007FF6003EFA94]\nE       \t(No symbol) [0x00007FF6003EFBC2]\nE       \t(No symbol) [0x00007FF6003DF2E4]\nE       \tBaseThreadInitThunk [0x00007FFF68427344+20]\nE       \tRtlUserThreadStart [0x00007FFF6961CC91+33]\n\nenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException\n\nDuring handling of the above exception, another exception occurred:\n\n    @allure.title(\"Test Authentication\")\n    @allure.description(\"This test attempts to log into the website using a login and a password. Fails if any error happens.\\n\\nNote that this test does not test 2-Factor Authentication.\")\n    @allure.tag(\"NewUI\", \"Essentials\", \"Authentication\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.label(\"owner\", \"John Doe\")\n    @allure.link(base_url, name=\"Website\")\n    @allure.issue(\"AUTH-123\")\n    @allure.testcase(\"TMS-456\")\n    @speed_test\n    def test_login():\n    \n        with allure.step('Открыть главную страницу'):\n            auth_with_selene.visit(base_url)\n    \n        auth_with_selene.start()\n>       auth_with_selene.login()\n\ntests\\test_auth_with_selene.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\auth_with_selene.py:12: in login\n    s('#login').type('John')\nenv\\lib\\site-packages\\selene\\core\\entity.py:455: in type\n    self.wait.for_(\nenv\\lib\\site-packages\\selene\\core\\wait.py:150: in for_\n    return self._decorator(self)(logic)(fn)\nenv\\lib\\site-packages\\selene\\support\\_logging.py:104: in decorated\n    return for_(fn)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfn = <selene.core.wait.Command object at 0x000002427CE053F0>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n                return fn(self.entity)\n            except Exception as reason:\n                if time.time() > finish_time:\n                    reason_string = '{name}: {message}'.format(\n                        name=reason.__class__.__name__,\n                        message=getattr(reason, \"msg\", str(reason)),\n                    )\n                    # TODO: think on how can we improve logging failures in selene, e.g. reverse msg and stacktrace\n                    # stacktrace = getattr(reason, 'stacktrace', None)\n                    # TODO: should we have an option to turn on stacktrace logging?\n                    timeout = self._timeout\n                    entity = self.entity\n    \n                    # if it's a normal function, it should have __qualname__,\n                    # then use it, otherwise use str(fn)\n                    fn_name = getattr(\n                        fn,\n                        '__qualname__',\n                        getattr(fn, '__str__', lambda: str(fn))(),\n                    )\n    \n                    failure = TimeoutException(\n                        f'\\n'\n                        f'\\nTimed out after {timeout}s, while waiting for:'\n                        f'\\n{entity}.{fn_name}'\n                        f'\\n'\n                        f'\\nReason: {reason_string}'\n                    )\n    \n>                   raise self._hook_failure(failure)\nE                   selene.core.exceptions.TimeoutException: Message: \nE                   \nE                   Timed out after 10s, while waiting for:\nE                   browser.element(('css selector', '#login')).type: John\nE                   \nE                   Reason: ElementNotInteractableException: element not interactable\nE                     (Session info: chrome=121.0.6167.140)\nE                   Screenshot: file://C:\\Users\\Юрий\\.selene\\screenshots\\1719012484799\\1719012484799.png\nE                   PageSource: file://C:\\Users\\Юрий\\.selene\\screenshots\\1719012484799\\1719012484799.html\n\nenv\\lib\\site-packages\\selene\\core\\wait.py:148: TimeoutException"}, "description": "This test attempts to log into the website using a login and a password. Fails if any error happens.\n\nNote that this test does not test 2-Factor Authentication.", "steps": [{"name": "Открыть главную страницу", "status": "passed", "start": 1719012508782, "stop": 1719012509121}, {"name": "element('#login'): type: John", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 10s, while waiting for:\nbrowser.element(('css selector', '#login')).type: John\n\nReason: ElementNotInteractableException: element not interactable\n  (Session info: chrome=121.0.6167.140)\nScreenshot: file://C:\\Users\\Юрий\\.selene\\screenshots\\1719012484799\\1719012484799.png\nPageSource: file://C:\\Users\\Юрий\\.selene\\screenshots\\1719012484799\\1719012484799.html\n\n", "trace": "  File \"E:\\IT\\AQA\\rrs\\python\\lessons\\practice_3\\env\\lib\\site-packages\\selene\\support\\_logging.py\", line 104, in decorated\n    return for_(fn)\n  File \"E:\\IT\\AQA\\rrs\\python\\lessons\\practice_3\\env\\lib\\site-packages\\selene\\core\\wait.py\", line 148, in logic\n    raise self._hook_failure(failure)\n"}, "start": 1719012509121, "stop": 1719012519219}], "start": 1719012508781, "stop": 1719012519251, "uuid": "9fcf4267-d2d3-4e33-94a2-a54ee1f78da2", "historyId": "1a4d25bb59994fd792df79773c4c040e", "testCaseId": "1a4d25bb59994fd792df79773c4c040e", "fullName": "tests.test_auth_with_selene#test_login", "labels": [{"name": "tag", "value": "Authentication"}, {"name": "owner", "value": "John Doe"}, {"name": "severity", "value": "critical"}, {"name": "tag", "value": "Essentials"}, {"name": "tag", "value": "NewUI"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_auth_with_selene"}, {"name": "host", "value": "DESKTOP-7NMG6HA"}, {"name": "thread", "value": "13664-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_auth_with_selene"}], "links": [{"type": "tms", "url": "TMS-456", "name": "TMS-456"}, {"type": "issue", "url": "AUTH-123", "name": "AUTH-123"}, {"type": "link", "url": "https://victoretc.github.io/selenium_waits/", "name": "Website"}]}